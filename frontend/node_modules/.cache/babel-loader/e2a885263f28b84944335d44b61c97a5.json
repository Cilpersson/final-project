{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  login: {\n    accessToken: null,\n    userId: 0,\n    errorMessage: null,\n    isSignedIn: false\n  }\n};\nexport const user = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {\n    setAccessToken: (state, action) => {\n      const {\n        accessToken\n      } = action.payload;\n      state.login.accessToken = accessToken;\n    },\n    setUserId: (state, action) => {\n      const {\n        userId\n      } = action.payload;\n      state.login.userId = userId;\n    },\n    setErrorMessage: (state, action) => {\n      const {\n        errorMessage\n      } = action.payload;\n      state.login.errorMessage = errorMessage;\n    },\n    setIsSignedIn: (state, action) => {\n      const {\n        isSignedIn\n      } = action.payload;\n      state.login.isSignedIn = isSignedIn;\n      localStorage.setItem(\"isSignedIn\", JSON.stringify(isSignedIn));\n    }\n  }\n});\n/* THUNKS */\n\nexport const login = (email, password) => {\n  const LOGIN_URL = \"http://localhost:8080/sessions\";\n  return dispatch => {\n    fetch(LOGIN_URL, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email,\n        password\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw \"Unable to sign in, please try again.\";\n    }).then(json => {\n      dispatch(user.actions.setAccessToken({\n        accessToken: json.accessToken\n      }));\n      dispatch(user.actions.setUserId({\n        userId: json.userId\n      }));\n    }).catch(err => {\n      dispatch(user.actions.logout());\n      dispatch(user.actions.setErrorMessage({\n        errorMessage: err\n      }));\n    });\n  };\n};\nexport const authorization = () => {\n  const USERS_URL = `http://localhost:8080/users`;\n  return (dispatch, getState) => {\n    const accessToken = getState().user.login.accessToken;\n    const userId = getState().user.login.userId;\n    fetch(`${USERS_URL}/${userId}/secret`, {\n      method: \"GET\",\n      headers: {\n        Authorization: accessToken\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw \"Could not get information. Make sure you are logged in and try again.\";\n    }).then(json => {\n      dispatch(user.actions.setIsSignedIn({\n        isSignedIn: true\n      }));\n      localStorage.setItem(\"isSignedIn\", JSON.stringify(true));\n    }).catch(err => {\n      dispatch(user.actions.setErrorMessage({\n        errorMessage: err\n      }));\n    });\n  };\n};\nexport const signup = (name, email, password) => {\n  const SIGNUP_URL = \"http://localhost:8080/users\";\n  return dispatch => {\n    fetch(SIGNUP_URL, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw \"Unable to sign up, please try again.\";\n    }).then(json => {\n      dispatch(user.actions.setAccessToken({\n        accessToken: json.accessToken\n      }));\n      dispatch(user.actions.setUserId({\n        userId: json.userId\n      }));\n    }).catch(err => {\n      dispatch(user.actions.logout());\n      dispatch(user.actions.setErrorMessage({\n        errorMessage: err\n      }));\n    });\n  };\n};\nexport const createGrid = () => {};\nexport const connectToGrid = () => {};\nexport const logout = () => {\n  return dispatch => {\n    localStorage.setItem(\"isSignedIn\", JSON.stringify(false));\n    dispatch(user.actions.setErrorMessage({\n      errorMessage: null\n    }));\n    dispatch(user.actions.setAccessToken({\n      accessToken: null\n    }));\n    dispatch(user.actions.setUserId({\n      userId: 0\n    }));\n    dispatch(user.actions.setIsSignedIn({\n      isSignedIn: false\n    }));\n  };\n};","map":{"version":3,"sources":["/Users/christina/Desktop/me/project-technigo/final-project/frontend/src/reducers/user.js"],"names":["createSlice","initialState","login","accessToken","userId","errorMessage","isSignedIn","user","name","reducers","setAccessToken","state","action","payload","setUserId","setErrorMessage","setIsSignedIn","localStorage","setItem","JSON","stringify","email","password","LOGIN_URL","dispatch","fetch","method","body","headers","then","res","ok","json","actions","catch","err","logout","authorization","USERS_URL","getState","Authorization","signup","SIGNUP_URL","createGrid","connectToGrid"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  login: {\n    accessToken: null,\n    userId: 0,\n    errorMessage: null,\n    isSignedIn: false,\n  },\n};\n\nexport const user = createSlice({\n  name: \"user\",\n  initialState: initialState,\n\n  reducers: {\n    setAccessToken: (state, action) => {\n      const { accessToken } = action.payload;\n      state.login.accessToken = accessToken;\n    },\n    setUserId: (state, action) => {\n      const { userId } = action.payload;\n      state.login.userId = userId;\n    },\n    setErrorMessage: (state, action) => {\n      const { errorMessage } = action.payload;\n      state.login.errorMessage = errorMessage;\n    },\n    setIsSignedIn: (state, action) => {\n      const { isSignedIn } = action.payload;\n      state.login.isSignedIn = isSignedIn;\n      localStorage.setItem(\"isSignedIn\", JSON.stringify(isSignedIn));\n    },\n  },\n});\n\n/* THUNKS */\nexport const login = (email, password) => {\n  const LOGIN_URL = \"http://localhost:8080/sessions\";\n  return (dispatch) => {\n    fetch(LOGIN_URL, {\n      method: \"POST\",\n      body: JSON.stringify({ email, password }),\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n        throw \"Unable to sign in, please try again.\";\n      })\n      .then((json) => {\n        dispatch(\n          user.actions.setAccessToken({\n            accessToken: json.accessToken,\n          })\n        );\n        dispatch(\n          user.actions.setUserId({\n            userId: json.userId,\n          })\n        );\n      })\n      .catch((err) => {\n        dispatch(user.actions.logout());\n        dispatch(user.actions.setErrorMessage({ errorMessage: err }));\n      });\n  };\n};\n\nexport const authorization = () => {\n  const USERS_URL = `http://localhost:8080/users`;\n  return (dispatch, getState) => {\n    const accessToken = getState().user.login.accessToken;\n    const userId = getState().user.login.userId;\n    fetch(`${USERS_URL}/${userId}/secret`, {\n      method: \"GET\",\n      headers: { Authorization: accessToken },\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n        throw \"Could not get information. Make sure you are logged in and try again.\";\n      })\n      .then((json) => {\n        dispatch(user.actions.setIsSignedIn({ isSignedIn: true }));\n        localStorage.setItem(\"isSignedIn\", JSON.stringify(true));\n      })\n      .catch((err) => {\n        dispatch(user.actions.setErrorMessage({ errorMessage: err }));\n      });\n  };\n};\n\nexport const signup = (name, email, password) => {\n  const SIGNUP_URL = \"http://localhost:8080/users\";\n  return (dispatch) => {\n    fetch(SIGNUP_URL, {\n      method: \"POST\",\n      body: JSON.stringify({ name, email, password }),\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n        throw \"Unable to sign up, please try again.\";\n      })\n      .then((json) => {\n        dispatch(\n          user.actions.setAccessToken({\n            accessToken: json.accessToken,\n          })\n        );\n        dispatch(\n          user.actions.setUserId({\n            userId: json.userId,\n          })\n        );\n      })\n      .catch((err) => {\n        dispatch(user.actions.logout());\n        dispatch(user.actions.setErrorMessage({ errorMessage: err }));\n      });\n  };\n};\n\nexport const createGrid = () => {};\n\nexport const connectToGrid = () => {};\n\nexport const logout = () => {\n  return (dispatch) => {\n    localStorage.setItem(\"isSignedIn\", JSON.stringify(false));\n    dispatch(user.actions.setErrorMessage({ errorMessage: null }));\n    dispatch(user.actions.setAccessToken({ accessToken: null }));\n    dispatch(user.actions.setUserId({ userId: 0 }));\n    dispatch(user.actions.setIsSignedIn({ isSignedIn: false }));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}